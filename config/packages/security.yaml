security:
    enable_authenticator_manager: true
    providers:
        user:
            memory:
                users:
                    admin: { password: '$2y$04$HARxXUxW84jVUnfmk4DO4eA1rYIWnLMWrOOrWr7apC.aDjK/USFuC', roles: [ 'ROLE_ADMIN' ] }

    firewalls:
        api_token_refresh:
            pattern: ^/api/security/refresh-token
            stateless: true
            provider: user
            refresh_jwt:
                check_path: gesdinet_jwt_refresh_token
        login:
            pattern: ^/api/security/login
            stateless: true
            provider: user
            json_login:
                check_path: /api/security/login
                username_path: email
                password_path: password
                success_handler: lexik_jwt_authentication.handler.authentication_success
                failure_handler: lexik_jwt_authentication.handler.authentication_failure
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        main:
            pattern: ^/api
            stateless: true
            provider: user


    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
            algorithm: auto
            cost: 4
            time_cost: 3
            memory_cost: 10

    access_control:
         - { path: ^/api/doc, roles: PUBLIC_ACCESS }
         - { path: ^/api/security, roles: PUBLIC_ACCESS }
         - { path: ^/api, roles: IS_AUTHENTICATED_FULLY }

when@test:
    security:
        firewalls:
            main:
                stateless: false
        password_hashers:
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4
                time_cost: 3
                memory_cost: 10
